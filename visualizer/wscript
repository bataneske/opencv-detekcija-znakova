#!/usr/bin/env python3
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT

'''

###############################################################################

import os
import sys
import fnmatch
import shutil
import datetime
import glob

import waflib

###############################################################################

APPNAME = 'visualizer'

top = '.'

###############################################################################


def prerequisites(ctx):
	if sys.platform.startswith('linux'):
		# Ubuntu.
		ctx.exec_command2(
			'apt -y install ' +
				'pkg-config qt5-default libqcustomplot-dev ' +
				'libyaml-cpp-dev libopencv-dev'
		)
	elif sys.platform == 'win32' and os.name == 'nt' and os.path.sep == '/':
		# MSYS2 Windows /mingw32/bin/python.
		ctx.exec_command2(
			'pacman --noconfirm -S mingw-w64-i686-???'
		)

def options(opt):
	opt.load('compiler_cxx qt5')

	opt.add_option(
		'--prefix',
		dest = 'prefix',
		default = '/usr/local'
	)


def configure(cfg):
	cfg.load('compiler_cxx qt5')

	cfg.env.append_value('CXXFLAGS', '-std=c++17')
	#cfg.env.append_value('LIB', 'pthread')
	cfg.env.append_value('CXXFLAGS', '-g -rdynamic'.split()) # For debug.

	if cfg.check_cfg(package = 'opencv4', mandatory = False):
		opencv_package = 'opencv4'
	elif cfg.check_cfg(package = 'opencv3', mandatory = False):
		opencv_package = 'opencv3'
	elif cfg.check_cfg(package = 'opencv', mandatory = True):
		opencv_package = 'opencv'
	cfg.check_cfg(
		package = opencv_package,
		uselib_store = 'OpenCV',
		args = '--cflags --libs',
		mandatory = True
	)

	cfg.check(
		uselib_store = 'QCustomPlot',
		msg = "Checking for 'QCustomPlot'",
		header_name = 'qcustomplot.h',
		lib = 'qcustomplot',
		features = 'cxx cxxprogram qt5',
		uselib = 'QT5CORE QT5GUI QT5PRINTSUPPORT',
		mandatory = True
	)

	cfg.check_cfg(
		package = 'yaml-cpp',
		args = ['--cflags', '--libs'],
		uselib_store = 'YAML',
		mandatory = True
	)

	p = cfg.root.make_node(cfg.options.prefix)
	cfg.env.PREFIX = str(p)
	cfg.env.BINDIR = str(p.make_node('bin'))
	cfg.env.LIBDIR = str(p.make_node('lib'))
	

def build(bld):
	
	bld.shlib(
		target = 'visualizer',
		features = 'qt5',
		use = 'OpenCV QCustomPlot QT5WIDGETS QT5PRINTSUPPORT YAML',
		includes = [
			#bld.bldnode.make_node('/src'), # For UI generated header.
			bld.bldnode.make_node('visualizer/src'), # For UI generated header.
			'include'
		],
		export_includes = 'include',
		moc = bld.path.ant_glob('src/*.hpp') +
			bld.path.ant_glob('src/*.h'),
		source = bld.path.ant_glob('src/*.cpp') +
			bld.path.ant_glob('src/*.ui') +
			bld.path.ant_glob('src/*.qrc'),
	)
	bld.install_files(
		'${PREFIX}/include/',
		bld.path.ant_glob('include/*')
	)

###############################################################################

def exec_command2(self, cmd, **kw):
	# Log output while running command.
	kw['stdout'] = None
	kw['stderr'] = None
	ret = self.exec_command(cmd, **kw)
	if ret != 0:
		self.fatal('Command "{}" returned {}'.format(cmd, ret))
setattr(waflib.Context.Context, 'exec_command2', exec_command2)

###############################################################################

def recursive_glob(pattern, directory = '.'):
	for root, dirs, files in os.walk(directory, followlinks = True):
		for f in files:
			if fnmatch.fnmatch(f, pattern):
				yield os.path.join(root, f)
		for d in dirs:
			if fnmatch.fnmatch(d + '/', pattern):
				yield os.path.join(root, d)

def collect_git_ignored_files():
	for gitignore in recursive_glob('.gitignore'):
		with open(gitignore) as f:
			base = os.path.dirname(gitignore)

			for pattern in f.readlines():
				pattern = pattern[:-1]
				for f in recursive_glob(pattern, base):
					yield f

###############################################################################

def distclean(ctx):
	for fn in collect_git_ignored_files():
		if os.path.isdir(fn):
			shutil.rmtree(fn)
		else:
			os.remove(fn)

def dist(ctx):
	now = datetime.datetime.now()
	time_stamp = '{:d}-{:02d}-{:02d}-{:02d}-{:02d}-{:02d}'.format(
		now.year,
		now.month,
		now.day,
		now.hour,
		now.minute,
		now.second
	)
	ctx.arch_name = '../{}-{}.zip'.format(APPNAME, time_stamp)
	ctx.algo = 'zip'
	ctx.base_name = APPNAME
	# Also pack git.
	waflib.Node.exclude_regs = waflib.Node.exclude_regs.replace(
'''
**/.git
**/.git/**
**/.gitignore''', '')
	# Ignore waf's stuff.
	waflib.Node.exclude_regs += '\n**/.waf*'

###############################################################################
